1. Prompt: wie erstellt man einen timer in java swing?
--> Timer mit javax.swing.Timer (gut f√ºr GUIs)

import javax.swing.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class SwingTimerBeispiel {
    public static void main(String[] args) {
        int delay = 1000; // Millisekunden
        Timer timer = new Timer(delay, new ActionListener() {
            int sekunden =   0;
            @Override
            public void actionPerformed(ActionEvent e) {
                sekunden++;
                System.out.println("Sekunden: " + sekunden);
                if (sekunden == 5) {
                    ((Timer)e.getSource()).stop();
                    System.out.println("Fertig!");
                }
            }
        });
        timer.start();

        // Verhindert sofortiges Beenden in Konsolenanwendungen:
        JOptionPane.showMessageDialog(null, "Timer l√§uft ‚Äì klicke OK zum Beenden.");
    }
}
M√∂chtest du z.‚ÄØB. einen Countdown, Stoppuhr, oder einen GUI-Timer mit Start/Stop/Reset? Sag einfach Bescheid, und ich zeig dir genau das passende Beispiel.

2. Prompt: wie kann man in java swing ein objekt versch√∂nern wie in css
--> In Java Swing kannst du ein Objekt (z.‚ÄØB. ein JButton, JPanel, JLabel usw.) gestalten oder ‚Äûversch√∂nern‚Äú, aber Swing bietet keine direkte Unterst√ºtzung f√ºr CSS wie in HTML. Stattdessen verwendest du Methoden und Klassen aus dem javax.swing und java.awt Paket, um Stil, Layout und Aussehen zu beeinflussen.

Hier sind einige Techniken, um Swing-Komponenten optisch aufzuwerten ‚Äì quasi das Pendant zu CSS in Swing:
1. Farben √§ndern (wie background-color, color in CSS)

JButton button = new JButton("Klick mich");
button.setBackground(Color.BLUE);         // Hintergrundfarbe
button.setForeground(Color.WHITE);        // Schriftfarbe

2. Schriftart und Gr√∂√üe (wie font-family, font-size)

button.setFont(new Font("Arial", Font.BOLD, 16));

3. Rahmen und Padding (wie border, padding)

button.setBorder(BorderFactory.createLineBorder(Color.BLACK, 2)); // Rahmen

// Padding mit leerem Rand innen
button.setBorder(BorderFactory.createCompoundBorder(
    BorderFactory.createLineBorder(Color.BLACK, 2),
    BorderFactory.createEmptyBorder(10, 20, 10, 20)
));

4. Transparenz und runde Ecken (wie border-radius, opacity)

F√ºr runde Ecken musst du die Komponente oft selbst zeichnen:

JButton roundedButton = new JButton("Rund") {
    @Override
    protected void paintComponent(Graphics g) {
        Graphics2D g2 = (Graphics2D) g.create();
        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        g2.setColor(getBackground());
        g2.fillRoundRect(0, 0, getWidth(), getHeight(), 30, 30);
        super.paintComponent(g);
        g2.dispose();
    }
};
roundedButton.setContentAreaFilled(false);
roundedButton.setOpaque(false);
roundedButton.setBackground(Color.CYAN);

Wenn du willst, kann ich dir ein konkretes Beispiel f√ºr eine ‚Äûh√ºbsche‚Äú Swing-Komponente schreiben. M√∂chtest du z.‚ÄØB. einen sch√∂n gestylten Button

3. Prompt: wie erstellt man in java swing ein viereck?
--> Um in Java Swing ein Viereck (Rechteck oder Quadrat) zu erstellen, kannst du eine benutzerdefinierte Komponente erstellen, indem du eine Klasse erstellst, die von JPanel erbt, und in dieser Klasse die paintComponent(Graphics g)-Methode √ºberschreibst. Dort kannst du dann mit der Graphics-API das Viereck zeichnen.

Hier ist ein einfaches Beispiel:

import javax.swing.*;
import java.awt.*;

public class ViereckZeichnen extends JPanel {

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);

        // Farbe setzen (optional)
        g.setColor(Color.BLUE);

        // Viereck zeichnen: (x, y, breite, h√∂he)
        g.drawRect(50, 50, 100, 100);  // Quadrat
        // g.drawRect(50, 50, 150, 100);  // Rechteck

        // Optional: gef√ºlltes Viereck
        // g.fillRect(200, 50, 100, 100);
    }

    public static void main(String[] args) {
        JFrame frame = new JFrame("Viereck in Swing");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(400, 300);
        frame.add(new ViereckZeichnen());
        frame.setVisible(true);
    }
}

Erkl√§rung:

    g.drawRect(x, y, breite, h√∂he): Zeichnet den Rand eines Vierecks.

    g.fillRect(...): Zeichnet ein ausgef√ºlltes Viereck.

    setColor(...): Setzt die Farbe f√ºr den n√§chsten Zeichenbefehl.

Du kannst das Viereck anpassen, indem du die Position und Gr√∂√üe in drawRect() ver√§nderst.

M√∂chtest du das Viereck z.‚ÄØB. interaktiv machen (verschiebbar, klickbar etc.)?

4. Prompt: das ist die darstellung der openings 1 d4 Nf6 2 c4 g6 und das ist die darstellung meiner aktuellen z√ºge w√§hrend des spiels
b2b3g8f6e2e4f6e4f2f3e4g5h2h4h7h6h4g5h6g5 ich m√∂chte diese vergleichen um openings zu erkennen, wie muss ich das format anpassen?
--> Vollst√§ndige Java-Methode (UCI-String ‚Üí lesbare Z√ºge mit Zugnummern)

import com.github.bhlangonijr.chesslib.*;
import com.github.bhlangonijr.chesslib.move.Move;

public class ChessMoveParser {

    public static String convertUciToAnnotatedMoves(String uciMoves) {
        Board board = new Board();
        StringBuilder sb = new StringBuilder();

        int moveNumber = 1;
        boolean whiteToMove = true;

        for (int i = 0; i <= uciMoves.length() - 4; i += 4) {
            String from = uciMoves.substring(i, i + 2).toUpperCase();
            String to = uciMoves.substring(i + 2, i + 4).toUpperCase();

            Square fromSquare = Square.fromValue(from);
            Square toSquare = Square.fromValue(to);
            Move move = new Move(fromSquare, toSquare);

            if (!board.isMoveLegal(move)) {
                System.out.println("Illegal move: " + from + to);
                break;
            }

            if (whiteToMove) {
                sb.append(moveNumber).append(". ");
                moveNumber++;
            }

            // Pseudo-SAN: Bauer = ohne Buchstabe, Figur = Anfangsbuchstabe
            Piece movingPiece = board.getPiece(fromSquare);
            String pieceSymbol = getPieceSymbol(movingPiece);

            sb.append(pieceSymbol).append(from.toLowerCase()).append(to.toLowerCase()).append(" ");
            board.doMove(move);
            whiteToMove = !whiteToMove;
        }

        return sb.toString().trim();
    }

    private static String getPieceSymbol(Piece piece) {
        switch (piece.getPieceType()) {
            case KNIGHT: return "N";
            case BISHOP: return "B";
            case ROOK: return "R";
            case QUEEN: return "Q";
            case KING: return "K";
            default: return ""; // Pawn
        }
    }

    public static void main(String[] args) {
        String uci = "b2b3g8f6e2e4f6e4f2f3e4g5h2h4h7h6h4g5h6g5";
        String moves = convertUciToAnnotatedMoves(uci);
        System.out.println("Z√ºge: " + moves);
    }
}

F√ºge in ChessPanel folgende Methode hinzu (z.‚ÄØB. unterhalb von getMoveHistory()):

private String convertMoveListToUci(List<Move> moves) {
    StringBuilder sb = new StringBuilder();
    for (Move move : moves) {
        sb.append(move.getFrom().value().toLowerCase());
        sb.append(move.getTo().value().toLowerCase());
    }
    return sb.toString();
}

5. Prompt: die from position soll nicht in den string mit rein package 
--> Damit die Ausgabe im algebraischen Notationsstil (SAN) ist ‚Äì ohne die "from"-Position bei Bauernz√ºgen (z.‚ÄØB. e4 statt Pe2e4) und korrekt mit Figurensymbolen f√ºr andere Figuren ‚Äì musst du die Ausgabe-Logik anpassen. Derzeit wird "from.to" f√ºr alle Figuren inklusive Bauern verwendet, was nicht dem SAN-Standard entspricht.
üîß √Ñnderung: Nur bei Figuren das "from"-Feld anh√§ngen

Ersetze:

sb.append(pieceSymbol).append(from.toLowerCase()).append(to.toLowerCase()).append(" ");

Mit:

if (pieceSymbol.isEmpty()) {
    // Bauer: nur Zielfeld
    sb.append(to.toLowerCase()).append(" ");
} else {
    // Figuren: Symbol + Zielfeld
    sb.append(pieceSymbol).append(to.toLowerCase()).append(" ");
}

6. Prompt: K√∂nnte man die Namen der er√∂ffnungen nicht auch zum key einer hashmap machen und den zug zum value und dann die aktuellen z√ºge mit der er√∂ffnung vergleichen?
--> HTML parsen und Map aufbauen

Hier der komplette funktionierende Parser, zugeschnitten auf dein HTML:

import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;

import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.LinkedHashMap;
import java.util.Map;

public class EcoHtmlParser {

    public static Map<String, String> parseOpenings(String htmlPath) throws Exception {
        String html = Files.readString(Paths.get(htmlPath));
        Document doc = Jsoup.parse(html);

        // Ziel-Map
        Map<String, String> openingsMap = new LinkedHashMap<>();

        // Gehe durch alle <b> Elemente mit dem ECO-Namen
        Elements boldElements = doc.select("b");

        for (Element b : boldElements) {
            String name = b.text(); // z.‚ÄØB. "A04 Reti Opening"

            // Gehe durch die nachfolgenden Siblings, um SAN-Z√ºge zu finden
            Element current = b.nextElementSibling();
            while (current != null && current.tagName().equals("br")) {
                // Hole das tats√§chliche Text-Node (direkt nach <br>)
                if (current.nextSibling() != null) {
                    String sanLine = current.nextSibling().toString().trim();

                    // Pr√ºfen, ob es wie "1 Nf3" aussieht
                    if (sanLine.matches("^\\d+\\..*")) {
                        String uci = convertSanToUci(sanLine);
                        if (uci != null && !uci.isEmpty()) {
                            openingsMap.put(uci, name);
                        }
                    }
                }
                current = current.nextElementSibling();
            }
        }
        return openingsMap;
    }

    // Dummy-SAN-zu-UCI-Konvertierung ‚Äì hier brauchst du eine Engine!
    private static String convertSanToUci(String sanMoves) {
        // Entferne Zugnummern und splitte in einzelne SAN-Z√ºge
        String cleaned = sanMoves.replaceAll("\\d+\\.", "").trim();
        String[] moves = cleaned.split("\\s+");

        // Du brauchst eine echte Umwandlung: SAN -> UCI
        // Hier nur Dummy: wir machen alles lowercase und h√§ngen es zusammen
        // z.B. "Nf3 d5" -> "nf3d5"
        StringBuilder sb = new StringBuilder();
        for (String move : moves) {
            sb.append(move.toLowerCase());
        }
        return sb.toString();
    }
}

7. Prompt: Wie kann ich diese html Datei (...) einlesen?
--> Was du aus dem HTML lernen solltest:

Die HTML-Struktur ist nicht tabellarisch, sondern:

    Jede Er√∂ffnung beginnt mit einem <B>-Tag:
    <B>B66 Sicilian, Richter-Rauzer Attack, 7...a6</B>

    Danach folgen die Z√ºge als reiner Text innerhalb eines <BR>-Blocks:
    1 e4 c5 2 Nf3 d6 3 d4 ...

Die Z√ºge sind in Standard Algebraic Notation (SAN) notiert ‚Äì nicht in UCI-Notation, die du bisher f√ºr deinen Vergleich nutzt.
Was du jetzt konkret tun musst
1. HTML richtig parsen (statt tr/td)

Verwende <b>-Elemente, lies ihren Text aus und hole danach den n√§chsten Textknoten als Zugfolge.
2. Zugfolge verarbeiten (SAN ‚Üí Move)

Du musst aus dem SAN-String wie 1 e4 c5 2 Nf3 d6 ... eine Liste von Move-Objekten erzeugen.

Dazu brauchst du ein Dummy-Board und benutzt engine.getLegalMoves() + SAN-Matching (oder eine Bibliothek, die Move.fromSan(...) unterst√ºtzt ‚Äì chesslib bietet das rudiment√§r mit manuellem Matching).
üõ† Beispielimplementierung loadOpeningsFromHtml(InputStream in)

public List<Opening> loadOpenings(InputStream inputStream) throws IOException {
    List<Opening> openings = new ArrayList<>();
    Document doc = Jsoup.parse(inputStream, "UTF-8", "");

    Elements boldElements = doc.select("b");

    for (Element bold : boldElements) {
        String headerText = bold.text().trim();

        // Nur Eintr√§ge mit ECO-Code (z.‚ÄØB. B66)
        if (!headerText.matches("^[A-E]\\d{2} .*")) continue;

        String[] parts = headerText.split(" ", 2);
        if (parts.length < 2) continue;

        String eco = parts[0].trim();
        String name = parts[1].trim();

        // Zugfolge aus n√§chstem Textknoten suchen
        Node next = bold.nextSibling();
        while (next != null && (next.nodeName().equals("br") || next.toString().trim().isEmpty())) {
            next = next.nextSibling();
        }

        if (next != null && next.nodeName().equals("#text")) {
            String moveText = next.toString().trim();
            if (!moveText.isEmpty()) {
                openings.add(new Opening(eco, name, moveText));
            }
        }
    }

    return openings;
}

8. Prompt: wie baut man in einem chess programm die er√∂ffnungserkennung ein mithilfe folgender webadresse? https://www3.diism.unisi.it/~addabbo/ECO_aperture_scacchi.html
--> Verwende jsoup, um HTML zu parsen

F√ºge jsoup zu deinem Projekt hinzu, z.‚ÄØB. √ºber Maven:

<dependency>
    <groupId>org.jsoup</groupId>
    <artifactId>jsoup</artifactId>
    <version>1.17.2</version>
</dependency>

Code: Parser + Erkennung

import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;

import java.io.File;
import java.util.ArrayList;
import java.util.List;

public class OpeningRecognizer {

    public static class Opening {
        String ecoCode;
        String name;
        List<String> moves;

        public Opening(String ecoCode, String name, String moveString) {
            this.ecoCode = ecoCode;
            this.name = name;
            this.moves = List.of(moveString.trim().split("\\s+"));
        }

        public boolean matches(List<String> playedMoves) {
            if (playedMoves.size() < moves.size()) return false;
            for (int i = 0; i < moves.size(); i++) {
                if (!playedMoves.get(i).equals(moves.get(i))) return false;
            }
            return true;
        }

        @Override
        public String toString() {
            return ecoCode + " ‚Äì " + name;
        }
    }

    public static List<Opening> loadOpenings(File htmlFile) throws Exception {
        List<Opening> openingList = new ArrayList<>();

        Document doc = Jsoup.parse(htmlFile, "UTF-8");
        Elements rows = doc.select("tr");

        for (Element row : rows) {
            Elements cols = row.select("td");
            if (cols.size() >= 3) {
                String eco = cols.get(0).text().trim();
                String name = cols.get(1).text().trim();
                String moveStr = cols.get(2).text().trim();

                if (!eco.isEmpty() && !name.isEmpty() && !moveStr.isEmpty()) {
                    openingList.add(new Opening(eco, name, moveStr));
                }
            }
        }

        return openingList;
    }

    public static Opening detectOpening(List<String> playedMoves, List<Opening> openings) {
        Opening bestMatch = null;
        int maxMatchedMoves = -1;

        for (Opening opening : openings) {
            if (opening.matches(playedMoves)) {
                if (opening.moves.size() > maxMatchedMoves) {
                    bestMatch = opening;
                    maxMatchedMoves = opening.moves.size();
                }
            }
        }

        return bestMatch;
    }

    public static void main(String[] args) throws Exception {
        File htmlFile = new File("eco_openings.html");
        List<Opening> openings = loadOpenings(htmlFile);

        // Beispielhafte gespielte Z√ºge
        List<String> played = List.of("e4", "e5", "Nf3", "Nc6");

        Opening match = detectOpening(played, openings);
        if (match != null) {
            System.out.println("Erkannte Er√∂ffnung: " + match);
        } else {
            System.out.println("Keine Er√∂ffnung erkannt.");
        }
    }
}

9. Prompt: ich will dass der Hintergrund des gesamten rechten bildschirm h√§lfte mattes dunkel gr√ºn ist
--> Erg√§nze ganz am Anfang der paintComponent(Graphics g) Methode folgenden Code:

@Override
protected void paintComponent(Graphics g) {
    super.paintComponent(g);

    // Rechte Bildschirmh√§lfte dunkelgr√ºn f√§rben
    Graphics2D g2 = (Graphics2D) g.create();
    Color mattDunkelgruen = new Color(0, 51, 0); // matter dunkler Gr√ºnton
    int panelWidth = getWidth();
    int panelHeight = getHeight();
    g2.setColor(mattDunkelgruen);
    g2.fillRect(panelWidth / 2, 0, panelWidth / 2, panelHeight);
    g2.dispose();

    // (Rest deines Codes folgt wie gehabt)
    ...
}

10. Prompt: wie f√ºgt man in JavaSwing Icons mit ImageIcon hinzu, und wie formatiert man sie auf kleinere gr√∂√üen?
--> In Java Swing kannst du mit ImageIcon Icons zu Komponenten wie JLabel, JButton oder JMenuItem hinzuf√ºgen. Wenn du ein Icon einf√ºgst und die Gr√∂√üe anpassen willst, musst du das Bild skalieren, bevor du es dem ImageIcon √ºbergibst. Hier ist eine n√ºchterne, saubere L√∂sung:
Beispiel: Icon in JButton einf√ºgen und skalieren

import javax.swing.*;
import java.awt.*;

public class IconBeispiel {
    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            JFrame frame = new JFrame("Icon Beispiel");
            frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

            // Urspr√ºngliches Image laden
            ImageIcon originalIcon = new ImageIcon("pfad/zum/bild.png");

            // Bild skalieren (z.‚ÄØB. auf 32x32 Pixel)
            Image skaliertesBild = originalIcon.getImage().getScaledInstance(32, 32, Image.SCALE_SMOOTH);
            ImageIcon skaliertesIcon = new ImageIcon(skaliertesBild);

            // Icon in Button einf√ºgen
            JButton button = new JButton("Mit Icon", skaliertesIcon);

            frame.add(button);
            frame.pack();
            frame.setLocationRelativeTo(null);
            frame.setVisible(true);
        });
    }
}

Wichtige Hinweise

    Image.SCALE_SMOOTH sorgt f√ºr bessere Qualit√§t beim Skalieren.

    Du kannst nat√ºrlich auch andere Komponenten wie JLabel oder JMenuItem verwenden:

    JLabel label = new JLabel(skaliertesIcon);

    Vermeide es, gro√üe Bilder ohne Skalierung direkt in die UI zu laden ‚Äì das wirkt schnell unprofessionell.

Wenn du willst, kann ich dir auch zeigen, wie man Icons aus dem Ressourcenordner (/resources) eines Maven- oder Gradle-Projekts l√§dt.

11. Prompt: was machen damit fenster direkt in voll bild ge√∂ffnet wird? package de.thm.informatik.chess.ui;

import java.io.IOException;

import javax.swing.JFrame;

public class MainWindow {
    public static void main(String[] args) throws IOException {
        JFrame frame = new JFrame("Chess");
        ChessPanel panel = new ChessPanel();
        panel.addClock(5);
        frame.add(panel);
        frame.pack();
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setVisible(true);

    }
}
--> Wenn du einfach nur willst, dass das Fenster ohne Schnickschnack den gesamten Bildschirm ausf√ºllt (ohne exklusiven Vollbildmodus, ohne spezielle API-Nutzung), kannst du es so machen:

import javax.swing.JFrame;
import java.awt.Toolkit;
import java.awt.Dimension;
import java.io.IOException;

public class MainWindow {
    public static void main(String[] args) throws IOException {
        JFrame frame = new JFrame("Chess");
        ChessPanel panel = new ChessPanel();
        panel.addClock(5);
        frame.add(panel);

        // Bildschirmgr√∂√üe holen und setzen
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        frame.setSize(screenSize);
        frame.setLocation(0, 0);

        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setVisible(true);
    }
}

Kurz erkl√§rt:

    Toolkit.getDefaultToolkit().getScreenSize() liefert die Aufl√∂sung des Bildschirms.

    frame.setSize(...) und frame.setLocation(0, 0) setzen das Fenster auf volle Gr√∂√üe, oben links beginnend.

    Kein setUndecorated, kein GraphicsDevice, kein echter exklusiver Modus ‚Äì nur einfacher, sauberer Vollbild-Look.
    
12. Ich entwickle eine GameState-Klasse f√ºr ein Schachprogramm, die den kompletten Spielzustand speichert ‚Äì Brettposition, Zugseite und geschlagene Figuren. 
Ich m√∂chte Tests schreiben, die pr√ºfen, ob der Spielzustand nach einem Zug korrekt gespeichert wird (also z. B. Figuren an den richtigen Positionen stehen und die Zugseite stimmt). 
Au√üerdem soll getestet werden, dass die gefallenen Figuren-Listen im GameState unabh√§ngig von den urspr√ºnglich √ºbergebenen Listen sind. Wie kann ich solche Tests gut formulieren?

13. Prompt: wie kann man in java swing auf den vorherigen jframe zugreifen?
--> In Java Swing k√∂nnen Sie auf den vorherigen JFrame zugreifen, indem Sie:

    Referenz speichern: Bewahren Sie eine Referenz auf das vorherige Fenster auf

    Window-Hierarchie nutzen: Verwenden Sie SwingUtilities.getWindowAncestor()

    Listener-Pattern: Implementieren Sie ein Callback-System

    Hier sind die besten L√∂sungsans√§tze:
    1. Direkte Referenzspeicherung (einfachster Weg)
    java

    // Beim Erstellen des neuen Fensters
    JFrame previousFrame = ...; // Referenz auf aktuelles Fenster
    newFrame.addWindowListener(new WindowAdapter() {
    @Override
    public void windowClosed(WindowEvent e) {
        previousFrame.setVisible(true); // Vorheriges Fenster wieder anzeigen
    }
    });

    2. Window-Hierarchie durch Navigation
    java

    // Von einer Komponente aus zum √ºbergeordneten Frame
    JFrame parentFrame = (JFrame) SwingUtilities.getWindowAncestor(meineKomponente);
    parentFrame.setVisible(true);

14. Prompt: Wie kann man in java swing ein tempor√§res fenster √∂ffnen zur ausgabe einer info? 
--> In Java Swing gibt es mehrere M√∂glichkeiten, ein tempor√§res Fenster f√ºr Informationsausgaben zu √∂ffnen. Hier sind die besten Optionen:
1. JOptionPane (einfachste L√∂sung)
java

// Einfache Info-Box
JOptionPane.showMessageDialog(parentFrame, "Ihre Information hier", "Titel", JOptionPane.INFORMATION_MESSAGE);

// Mit Anpassungen
JOptionPane.showMessageDialog(
    null, // Zentriert auf Bildschirm
    "Speichervorgang abgeschlossen",
    "Erfolg",
    JOptionPane.WARNING_MESSAGE,
    new ImageIcon("icon.png")
);

Prompt 15: How can i manually disable the castlingrights for a customboard when using ChessLib 1.3.4? I want to do it in this class: (SetupPositionPanel)
--> Yes ‚Äî you can (and should) remove the castling rights manually in your SetupPositionPanel before finalizing the custom position, especially since you're using board.clear() and placing pieces manually.

Since you're using ChessLib 1.3.4, you can manipulate the board state using its FEN string, because the library doesn't expose a direct method like setCastlingRights(...) publicly. Here's how you can do it cleanly:
In your doneButton logic:

// Get current board FEN
	String fen = board.getFen();

	// Replace the castling rights field with "-" (no castling)
	String[] parts = fen.split(" ");
	if (parts.length >= 6) {
		parts[2] = "-"; // Castling rights
		String newFen = String.join(" ", parts);
		board.loadFromFen(newFen); // Re-apply FEN with disabled castling
	}

Prompt 16.: Ich entwickle ein Java-Schachprogramm und benutze die Bibliothek chesslib.
Meine ChessEngine-Klasse hat ein Board-Objekt und Methoden wie getLegalMoves(), makeMove(Move) usw.
Bitte schreibe mir eine Klasse ShowMoveOptions, die aus einer gegebenen Square-Position alle legalen Zielpositionen als List<Square> zur√ºckgibt.
Zeige au√üerdem, wie ich ShowMoveOptions im Swing-Panel (ChessPanel) integriere, um beim Klicken auf eine Figur deren legale Z√ºge anzuzeigen.

Prompt 17.: Ich plane, in meinem Java-Schachprojekt die Bibliothek chesslib zu nutzen.
Mich interessiert, welche Kernfunktionen die Bibliothek bietet und wie eine einfache Implementierung aussehen k√∂nnte ‚Äì zum Beispiel f√ºr Zugausf√ºhrung, Zuglegalit√§tspr√ºfung oder Statusabfragen wie Schach oder Matt. Wie k√∂nnte ich das mit chesslib typischerweise umsetzen?

Prompt 18.: Wie kann ich die Chesslib https://github.com/bhlangonijr/chesslib verwenden, um eine Schach-und Matt Erkennung in meinem Schachprogramm einzubauen. Zudem m√∂chte ich in meinem Chesspannel eine Nachricht in einem Fenster dazu ausgeben. Ferner m√∂chte ich in der Nachricht noch die richtigen Farbe des betroffenen Spielers in der Nachricht ausgeben

Prompt 19.: Ich brauche einen MouseListener f√ºr mein Java-Schachspiel mit chesslib, der beim Klick das angeklickte Feld ermittelt, Figuren ausw√§hlt und Z√ºge ausf√ºhrt. Dabei soll er legale Z√ºge pr√ºfen

Prompt 20.: Ich programmiere ein Schachspiel in Java und m√∂chte eine Methode schreiben, die pr√ºft, ob ein Bauernzug eine Promotion ausl√∂st. Falls ja, soll ein Dialog erscheinen, in dem der Spieler die Figur ausw√§hlen kann, auf die der Bauer sich verwandeln soll (Dame, Turm, L√§ufer, Springer). Wenn keine Promotion n√∂tig ist, soll ein normaler Zug zur√ºckgegeben werden. Kannst du mir so eine Methode in Java schreiben, am besten mit Swing-Dialog zur Figurenwahl?

Prompt 21.: Ich habe in meinem Java-Schachspiel eine Bauernpromotion implementiert, bei der der Bauer beim Erreichen der letzten Reihe in eine andere Figur umgewandelt wird. Das Problem: Nach der Umwandlung kann ich keine weiteren Z√ºge mehr machen. Ich vermute, dass das am UCIParser liegt, da normale Z√ºge 4 Zeichen haben, Promotion-Z√ºge aber 5 Zeichen (z.B. e7e8q). Bitte hilf mir, meinen Parser so zu verbessern, dass er sowohl 4- als auch 5-stellige Z√ºge zuverl√§ssig verarbeiten kann. Wie kann ich in einer Schleife mehrere UCI-Z√ºge (auch mit Promotion) richtig parsen inklusive Pr√ºfung auf g√ºltige Promotion-Zeichen? 

Prompt 22.: Ich m√∂chte in meinem Schachprogramm mit Chesslib eine Klasse PieceImageLoader erstellen, die alle Figurenbilder einmalig statisch aus meinen Ressourcen l√§dt und in einer Map<Piece, Image> speichert. Die Bilder liegen im Ressourcenordner /images/ und hei√üen z.B. wp.png f√ºr wei√üen Bauern, bn.png f√ºr schwarzen Springer usw. 

Prompt 23: Erzeuge Java-Code, der aus einer Liste von Move-Objekten die UCI-Zugfolge generiert, indem er die Felder getFrom() und getTo() f√ºr jeden Zug an einen StringBuilder anh√§ngt.
-->
StringBuilder uciMoves = new StringBuilder();

        // UCI-Zugfolge aus den Move-Objekten zusammenbauen
        for (Move move : moves) {
            uciMoves.append(move.getFrom().toString().toLowerCase());
            uciMoves.append(move.getTo().toString().toLowerCase());
        }

Promt 24: Welche Funktionalit√§ten fehlen in dieser Klasse (hier UciParser) um der SAN Notation m√∂glichst nahe zu kommen?
-->
Punkte nach der Zugnummer, Figur als Gro√übuchstabe, korrektes Spielergebnis am Ende, Rochadenerkennung

Prompt 25: Wie realisiere ich die Ergebnis erkennung f√ºr meine PGN Datei?
-->
StringBuilder und dann
if (finalBoard.isMated()) {
                result = finalBoard.getSideToMove() == com.github.bhlangonijr.chesslib.Side.WHITE ? "0-1" : "1-0";
            } else if (finalBoard.isDraw()) {
                result = "1/2-1/2";
            }
dann

.append(result)




